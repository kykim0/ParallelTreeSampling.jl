var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ParallelTreeSampling","category":"page"},{"location":"#ParallelTreeSampling","page":"Home","title":"ParallelTreeSampling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ParallelTreeSampling.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ParallelTreeSampling]","category":"page"},{"location":"#ParallelTreeSampling.PISSolver","page":"Home","title":"ParallelTreeSampling.PISSolver","text":"MCTS solver with Importance Sampling\n\nFields:     depth::Int64         Maximum rollout horizon and tree depth.         default: 10     explorationconstant::Float64         Specified how much the solver should explore.         In the UCB equation, Q + c*sqrt(log(t/N)), c is the exploration constant.         default: 1.0     niterations::Int64         Number of iterations during each action() call.         default: 100     maxtime::Float64         Maximum amount of CPU time spent iterating through simulations.         default: Inf     kaction::Float64     alphaaction::Float64     kstate::Float64     alphastate::Float64         These constants control the double progressive widening. A new state         or action will be added if the number of children is less than or equal to kN^alpha.         defaults: k:10, alpha:0.5     virtualloss::Float64         A temporary loss added to the UCB score for nodes that are currently being         evaluated by some threads. This can be used to encourage threads to explore         broader parts of the search space. Relevant when running MCTS with multiple threads.         default: 0.0     keeptree::Bool         If true, store the tree in the planner for reuse at the next timestep (and every time it is used in the future). There is a computational cost for maintaining the state dictionary necessary for this.         default: false     enableactionpw::Bool         If true, enable progressive widening on the action space; if false just use the whole action space.         default: true     enablestatepw::Bool         If true, enable progressive widening on the state space; if false just use the single next state (for deterministic problems).         default: true     checkrepeatstate::Bool     checkrepeataction::Bool         When constructing the tree, check whether a state or action has been seen before (there is a computational cost to maintaining the dictionaries necessary for this)         default: true     treeininfo::Bool         If true, return the tree in the info dict when actioninfo is called. False by default because it can use a lot of memory if histories are being saved.         default: false     rng::AbstractRNG         Random number generator     estimatevalue::Any (rollout policy)         Function, object, or number used to estimate the value at the leaf nodes.         If this is a function f, f(mdp, s, depth) will be called to estimate the value.         If this is an object o, `estimatevalue(o, mdp, s, depth)will be called.         If this is a number, the value will be set to that number.         default: RolloutEstimator(RandomSolver(rng))     init_Q::Any         Function, object, or number used to set the initial Q(s,a) value at a new node.         If this is a functionf,f(mdp, s, a)will be called to set the value.         If this is an objecto,initQ(o, mdp, s, a)` will be called.         If this is a number, Q will always be set to that number.         default: 0.0     initN::Any         Function, object, or number used to set the initial N(s,a) value at a new node.         If this is a function f, f(mdp, s, a) will be called to set the value.         If this is an object o, init_N(o, mdp, s, a) will be called.         If this is a number, N will always be set to that number.         default: 0     nextaction::Any         Function or object used to choose the next action to be considered for progressive widening.         The next action is determined based on the MDP, the state, s, and the current DPWStateNode, snode.         If this is a function f, f(mdp, s, snode) will be called to set the value.         If this is an object o, `nextaction(o, mdp, s, snode)will be called.         default: RandomActionGenerator(rng)     default_action::Any         Function, action, or Policy used to determine the action if POMCP fails with exceptionex.         If this is a Functionf,f(pomdp, belief, ex)will be called.         If this is a Policyp,action(p, belief)will be called.         If it is an objecta,defaultaction(a, pomdp, belief, ex)will be called, and if this method is not implemented,awill be returned directly.         default:ExceptionRethrow()`     resetcallback::Function         Function used to reset/reinitialize the MDP to a given state s.         Useful when the simulator state is not truly separate from the MDP state.         f(mdp, s) will be called.         default: (mdp, s)->false (optimized out)     show_progress::Bool         Show progress bar during simulation.         default: false\n\nTODOs:\n\nRemove the MCTS dependency.\nClean up some of the settings.\n\n\n\n\n\n","category":"type"},{"location":"#ParallelTreeSampling.PISSolver-Tuple{}","page":"Home","title":"ParallelTreeSampling.PISSolver","text":"Use keyword arguments to specify values for the fields.\n\n\n\n\n\n","category":"method"},{"location":"#POMDPModelTools.action_info-Tuple{PISPlanner, Any}","page":"Home","title":"POMDPModelTools.action_info","text":"Construct a PISTree and choose the best action. Also output some information.\n\n\n\n\n\n","category":"method"},{"location":"#POMDPs.action-Tuple{PISPlanner, Any}","page":"Home","title":"POMDPs.action","text":"Construct a PISTree and choose an action.\n\n\n\n\n\n","category":"method"},{"location":"#ParallelTreeSampling._exp-Tuple{Any}","page":"Home","title":"ParallelTreeSampling._exp","text":"Utility function for numerically stable softmax.\n\n\n\n\n\n","category":"method"},{"location":"#ParallelTreeSampling.clear_tree!-Tuple{PISPlanner}","page":"Home","title":"ParallelTreeSampling.clear_tree!","text":"Delete existing decision tree.\n\n\n\n\n\n","category":"method"},{"location":"#ParallelTreeSampling.compute_IS_weight-Tuple{Any, Any, Any}","page":"Home","title":"ParallelTreeSampling.compute_IS_weight","text":"Calculate IS weights.\n\n\n\n\n\n","category":"method"},{"location":"#ParallelTreeSampling.select_action-Tuple{Any, Any}","page":"Home","title":"ParallelTreeSampling.select_action","text":"Calculate next action.\n\n\n\n\n\n","category":"method"},{"location":"#ParallelTreeSampling.simulate","page":"Home","title":"ParallelTreeSampling.simulate","text":"Return the reward for one iteration of MCTS.\n\n\n\n\n\n","category":"function"}]
}
